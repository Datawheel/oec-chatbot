image:
  pullPolicy: Always

imagePullSecrets:
  - name: github

replicaCount: 1

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 4
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 120

resources:
  requests:
    cpu: 500m
    memory: 1Gi
  limits:
    cpu: 1000m
    memory: 3Gi

livenessProbe:
  enabled: false
  failureThreshold: 3
  httpGet:
    path: /
    port: 80
    scheme: HTTP
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 30
  successThreshold: 1

readinessProbe:
  enabled: false
  failureThreshold: 3
  httpGet:
    path: /
    port: 80
    scheme: HTTP
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 30
  successThreshold: 2

service:
  type: ClusterIP
  port: 80

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "chatbot-api"

configMap:
  TOKENIZERS_PARALLELISM: "false"

# secrets:
#   <SECRET>: <BASE64_SECRET_VALUE>

ingress:
  enabled: true
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    acme.cert-manager.io/http01-edit-in-place: "true"
    ingress.kubernetes.io/ssl-redirect: "false"
    nginx.org/proxy-buffering: "false"
    nginx.org/websocket-services: "chatbot-api"
    nginx.org/location-snippets: |
      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Allow-Credentials "true";
      add_header Access-Control-Allow-Methods "GET,OPTIONS,PATCH,DELETE,POST,PUT";
      add_header Access-Control-Allow-Headers "X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version";
      
      proxy_pass_header         Access-Control-Allow-Origin;
      proxy_pass_header         Access-Control-Allow-Credentials;
      proxy_pass_header         Access-Control-Allow-Methods;
      proxy_pass_header         Access-Control-Allow-Headers;

      proxy_set_header          Host $host;
      proxy_set_header          X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto   $scheme;
      proxy_set_header          Upgrade $http_upgrade;
      proxy_set_header          Connection "upgrade";
    nginx.org/server-snippets: |
      if ($http_x_forwarded_proto = 'http') {
          return 308 https://$host$request_uri;
      }
  hosts:
    - host: oec-chatbot-api-dev.datawheel.us
      paths:
        - /
        - /ws
  tls:
    - secretName: chatbot-api-ingress-tls
      hosts: 
        - oec-chatbot-api-dev.datawheel.us
